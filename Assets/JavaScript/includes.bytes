/*
 * Author: Qiucw
 * DO NOT change order
 */


// Global Functions
//--------------------------------------------------
function jsb_GetJsType(fullname) {
    if (JsTypes == null) return undefined;
    for (var i = 0; i < JsTypes.length; i++) {
        if (JsTypes[i].fullname == fullname) {
            return JsTypes[i];
        }
    }
}

function jsb_ReplaceOrPushJsType(jst) {
    //if (!JsTypes) { JsTypes = []; }
    var found = false;
    for (var i = 0; i < JsTypes.length; i++) {
        if (JsTypes[i].fullname == jst.fullname) {
            JsTypes[i] = jst;
            found = true;
            break;
        }
    }
    if (!found) {
        JsTypes.push(jst);
    }
}

function printObj(obj) {
    var s = "============Object============\n";
    for (var k in obj) {
        if (obj.hasOwnProperty(k))
            s += k + ": " + obj[k] + "\n";
    }
    printError(s);
}

function dumpObj(obj) {
    var s = "============Object============\n";
    s += JSON.stringify(obj, null, '\t');
    printError(s);
}

function printArr(obj) {
    var s = "============Array============\n";
    for (var i = 0; i < obj.length; i++) {
        s += "[" + i + "] " + obj[i] + "\n";
    }
    printError(s);
}

function benchmark(s, f) {
    var start = Date.now();
    var r = f();
    var end = Date.now();
    printError(s + " " + (end - start) + " ms");
    return r;
}

var math = Math;

// 0) SharpKit library
//--------------------------------------------------
CS.require("ProtoBuff/Long_min");
CS.require("ProtoBuff/ByteBufferAB_min");
CS.require("ProtoBuff/ProtoBuf_min");

CS.require("SharpKit/jsclr");
CS.require("SharpKit/clrlibrary");

// 1) Files generated by JSBinding
// may overwrite some classes in step 0)
//--------------------------------------------------
CS.require("CSExportTypes");


// 2) Manually written js
// will overwrite some classes in step 1)
//--------------------------------------------------
CS.require("Manual/UnityEngine_Vector3");
CS.require("Manual/UnityEngine_Vector2");
CS.require("Manual/UnityEngine_Mathf");
CS.require("Manual/UnityEngine_MonoBehaviour");
CS.require("Manual/UnityEngine_WaitForSeconds");

//jsonUtils
CS.require("Manual/JsonUtils");

// 3) code generated by SharpKit
//--------------------------------------------------
CS.require("GameLogicCode");

// 4) JavaScript implemented
// will overwrite some classes in step 1)
//--------------------------------------------------

//
// may be more..
//

// 5) SharpKit handler (Compile)
//--------------------------------------------------
CS.require("SharpKit/myclrhandler");

// 6) Error handler
//--------------------------------------------------
CS.require("ErrorHandler");