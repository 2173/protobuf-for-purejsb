
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_Microphone
{

////////////////////// Microphone ///////////////////////////////////////
// constructors

static bool Microphone_Microphone1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, new UnityEngine.Microphone());
    }

    return true;
}

// fields

// properties
static void Microphone_devices(JSVCall vc)
{
        var result = UnityEngine.Microphone.devices;
                var arrRet = result;
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setStringS((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
}

// methods

static bool Microphone_End__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        UnityEngine.Microphone.End(arg0);
    }

    return true;
}

static bool Microphone_GetDeviceCaps__String__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        int r_arg1 = JSApi.incArgIndex();
        System.Int32 arg1;
        int r_arg2 = JSApi.incArgIndex();
        System.Int32 arg2;
        UnityEngine.Microphone.GetDeviceCaps(arg0, out arg1, out arg2);
        JSApi.setArgIndex(r_arg1);
        JSApi.setInt32((int)JSApi.SetType.ArgRef, arg1);
        JSApi.setArgIndex(r_arg2);
        JSApi.setInt32((int)JSApi.SetType.ArgRef, arg2);
    }

    return true;
}

static bool Microphone_GetPosition__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(UnityEngine.Microphone.GetPosition(arg0)));
    }

    return true;
}

static bool Microphone_IsRecording__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(UnityEngine.Microphone.IsRecording(arg0)));
    }

    return true;
}

static bool Microphone_Start__String__Boolean__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Boolean arg1 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg3 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, UnityEngine.Microphone.Start(arg0, arg1, arg2, arg3));
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.Microphone);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        Microphone_devices,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(Microphone_Microphone1, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(Microphone_End__String, "End"),
        new JSMgr.MethodCallBackInfo(Microphone_GetDeviceCaps__String__Int32__Int32, "GetDeviceCaps"),
        new JSMgr.MethodCallBackInfo(Microphone_GetPosition__String, "GetPosition"),
        new JSMgr.MethodCallBackInfo(Microphone_IsRecording__String, "IsRecording"),
        new JSMgr.MethodCallBackInfo(Microphone_Start__String__Boolean__Int32__Int32, "Start"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
