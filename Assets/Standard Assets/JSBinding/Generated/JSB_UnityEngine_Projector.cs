
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_Projector
{

////////////////////// Projector ///////////////////////////////////////
// constructors

static bool Projector_Projector1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, new UnityEngine.Projector());
    }

    return true;
}

// fields

// properties
static void Projector_nearClipPlane(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        var result = _this.nearClipPlane;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        _this.nearClipPlane = arg0;
    }
}
static void Projector_farClipPlane(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        var result = _this.farClipPlane;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        _this.farClipPlane = arg0;
    }
}
static void Projector_fieldOfView(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        var result = _this.fieldOfView;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        _this.fieldOfView = arg0;
    }
}
static void Projector_aspectRatio(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        var result = _this.aspectRatio;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        _this.aspectRatio = arg0;
    }
}
static void Projector_orthographic(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        var result = _this.orthographic;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        _this.orthographic = arg0;
    }
}
static void Projector_orthographicSize(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        var result = _this.orthographicSize;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        _this.orthographicSize = arg0;
    }
}
static void Projector_ignoreLayers(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        var result = _this.ignoreLayers;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
    }
    else
    { 
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        _this.ignoreLayers = arg0;
    }
}
static void Projector_material(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        var result = _this.material;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Material arg0 = (UnityEngine.Material)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.Projector _this = (UnityEngine.Projector)vc.csObj;
        _this.material = arg0;
    }
}

// methods


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.Projector);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        Projector_nearClipPlane,
        Projector_farClipPlane,
        Projector_fieldOfView,
        Projector_aspectRatio,
        Projector_orthographic,
        Projector_orthographicSize,
        Projector_ignoreLayers,
        Projector_material,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(Projector_Projector1, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
