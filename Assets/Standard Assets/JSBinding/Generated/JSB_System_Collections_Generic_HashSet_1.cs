
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.Serialization;

using jsval = JSApi.jsval;

public class JSB_System_Collections_Generic_HashSet_1
{

////////////////////// HashSet`1 ///////////////////////////////////////
// constructors
public static ConstructorID constructorID0 = new ConstructorID(null, null);

static bool HashSetA1_HashSetA11(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.HashSet<>), constructorID0); 
    if (constructor == null) return true;

    int len = argc - 1;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{}));
    }

    return true;
}
public static ConstructorID constructorID1 = new ConstructorID(new string[]{"IEqualityComparer`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_HashSetA12(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.HashSet<>), constructorID1); 
    if (constructor == null) return true;

    int len = argc - 1;
    if (len == 1)
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0}));
    }

    return true;
}
public static ConstructorID constructorID2 = new ConstructorID(new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_HashSetA13(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.HashSet<>), constructorID2); 
    if (constructor == null) return true;

    int len = argc - 1;
    if (len == 1)
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0}));
    }

    return true;
}
public static ConstructorID constructorID3 = new ConstructorID(new string[]{"IEnumerable`1", "IEqualityComparer`1"}, new TypeFlag[]{TypeFlag.IsGenericType, TypeFlag.IsGenericType});

static bool HashSetA1_HashSetA14(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.HashSet<>), constructorID3); 
    if (constructor == null) return true;

    int len = argc - 1;
    if (len == 2)
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object arg1 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0, arg1}));
    }

    return true;
}

// fields

// properties
public static PropertyID propertyID0 = new PropertyID("Count", "Int32", TypeFlag.None, null, null);
static void HashSetA1_Count(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID0); 
    if (member == null) return;

        var result = member.GetValue(vc.csObj, new object[]{});
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}
public static PropertyID propertyID1 = new PropertyID("Comparer", "IEqualityComparer`1", TypeFlag.None, null, null);
static void HashSetA1_Comparer(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID1); 
    if (member == null) return;

        var result = member.GetValue(vc.csObj, new object[]{});
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}

// methods
public static MethodID methodID0 = new MethodID("Add", "Boolean", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool HashSetA1_Add__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID0); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID1 = new MethodID("Clear", "Void", TypeFlag.None, null, null);

static bool HashSetA1_Clear(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID1); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID2 = new MethodID("Contains", "Boolean", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool HashSetA1_Contains__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID2); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID3 = new MethodID("CopyTo", "Void", TypeFlag.None, new string[]{"T[]", "Int32", "Int32"}, new TypeFlag[]{TypeFlag.IsArray, TypeFlag.None, TypeFlag.None});

static bool HashSetA1_CopyTo__T_Array__Int32__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID3); 
    if (method == null) return true;

    int len = argc;
    if (len == 3) 
    {
        object arg0 = JSDataExchangeMgr.GetJSArg<object[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new object[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1, arg2 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID4 = new MethodID("CopyTo", "Void", TypeFlag.None, new string[]{"T[]", "Int32"}, new TypeFlag[]{TypeFlag.IsArray, TypeFlag.None});

static bool HashSetA1_CopyTo__T_Array__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID4); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        object arg0 = JSDataExchangeMgr.GetJSArg<object[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new object[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID5 = new MethodID("CopyTo", "Void", TypeFlag.None, new string[]{"T[]"}, new TypeFlag[]{TypeFlag.IsArray});

static bool HashSetA1_CopyTo__T_Array(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID5); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = JSDataExchangeMgr.GetJSArg<object[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new object[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID6 = new MethodID("ExceptWith", "Void", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_ExceptWith__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID6); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID7 = new MethodID("GetEnumerator", "Enumerator", TypeFlag.None, null, null);

static bool HashSetA1_GetEnumerator(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID7); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static MethodID methodID8 = new MethodID("GetObjectData", "Void", TypeFlag.None, new string[]{"SerializationInfo", "StreamingContext"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None});

static bool HashSetA1_GetObjectData__SerializationInfo__StreamingContext(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID8); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Runtime.Serialization.SerializationInfo arg0 = (System.Runtime.Serialization.SerializationInfo)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Runtime.Serialization.StreamingContext arg1 = (System.Runtime.Serialization.StreamingContext)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID9 = new MethodID("IntersectWith", "Void", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_IntersectWith__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID9); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID10 = new MethodID("IsProperSubsetOf", "Boolean", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_IsProperSubsetOf__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID10); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID11 = new MethodID("IsProperSupersetOf", "Boolean", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_IsProperSupersetOf__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID11); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID12 = new MethodID("IsSubsetOf", "Boolean", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_IsSubsetOf__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID12); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID13 = new MethodID("IsSupersetOf", "Boolean", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_IsSupersetOf__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID13); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID14 = new MethodID("OnDeserialization", "Void", TypeFlag.None, new string[]{"Object"}, new TypeFlag[]{TypeFlag.None});

static bool HashSetA1_OnDeserialization__Object(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID14); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        System.Object arg0 = (System.Object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID15 = new MethodID("Overlaps", "Boolean", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_Overlaps__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID15); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID16 = new MethodID("Remove", "Boolean", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool HashSetA1_Remove__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID16); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Predicate<T> HashSetA1_RemoveWhere_GetDelegate_member17_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID17 = new MethodID("RemoveWhere", "Int32", TypeFlag.None, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_RemoveWhere__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID17); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_HashSet_1).GetMethod("HashSetA1_RemoveWhere_GetDelegate_member17_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID18 = new MethodID("SetEquals", "Boolean", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_SetEquals__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID18); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID19 = new MethodID("SymmetricExceptWith", "Void", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_SymmetricExceptWith__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID19); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID20 = new MethodID("TrimExcess", "Void", TypeFlag.None, null, null);

static bool HashSetA1_TrimExcess(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID20); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID21 = new MethodID("UnionWith", "Void", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool HashSetA1_UnionWith__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID21); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID22 = new MethodID("CreateSetComparer", "IEqualityComparer`1", TypeFlag.None, null, null);

static bool HashSetA1_CreateSetComparer(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(typeof(System.Collections.Generic.HashSet<>), methodID22); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(null, arr_t));
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(System.Collections.Generic.HashSet<>);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        HashSetA1_Count,
        HashSetA1_Comparer,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(HashSetA1_HashSetA11, ".ctor"),
        new JSMgr.MethodCallBackInfo(HashSetA1_HashSetA12, ".ctor"),
        new JSMgr.MethodCallBackInfo(HashSetA1_HashSetA13, ".ctor"),
        new JSMgr.MethodCallBackInfo(HashSetA1_HashSetA14, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(HashSetA1_Add__T, "Add"),
        new JSMgr.MethodCallBackInfo(HashSetA1_Clear, "Clear"),
        new JSMgr.MethodCallBackInfo(HashSetA1_Contains__T, "Contains"),
        new JSMgr.MethodCallBackInfo(HashSetA1_CopyTo__T_Array__Int32__Int32, "CopyTo"),
        new JSMgr.MethodCallBackInfo(HashSetA1_CopyTo__T_Array__Int32, "CopyTo"),
        new JSMgr.MethodCallBackInfo(HashSetA1_CopyTo__T_Array, "CopyTo"),
        new JSMgr.MethodCallBackInfo(HashSetA1_ExceptWith__IEnumerableT1_T, "ExceptWith"),
        new JSMgr.MethodCallBackInfo(HashSetA1_GetEnumerator, "GetEnumerator"),
        new JSMgr.MethodCallBackInfo(HashSetA1_GetObjectData__SerializationInfo__StreamingContext, "GetObjectData"),
        new JSMgr.MethodCallBackInfo(HashSetA1_IntersectWith__IEnumerableT1_T, "IntersectWith"),
        new JSMgr.MethodCallBackInfo(HashSetA1_IsProperSubsetOf__IEnumerableT1_T, "IsProperSubsetOf"),
        new JSMgr.MethodCallBackInfo(HashSetA1_IsProperSupersetOf__IEnumerableT1_T, "IsProperSupersetOf"),
        new JSMgr.MethodCallBackInfo(HashSetA1_IsSubsetOf__IEnumerableT1_T, "IsSubsetOf"),
        new JSMgr.MethodCallBackInfo(HashSetA1_IsSupersetOf__IEnumerableT1_T, "IsSupersetOf"),
        new JSMgr.MethodCallBackInfo(HashSetA1_OnDeserialization__Object, "OnDeserialization"),
        new JSMgr.MethodCallBackInfo(HashSetA1_Overlaps__IEnumerableT1_T, "Overlaps"),
        new JSMgr.MethodCallBackInfo(HashSetA1_Remove__T, "Remove"),
        new JSMgr.MethodCallBackInfo(HashSetA1_RemoveWhere__PredicateT1_T, "RemoveWhere"),
        new JSMgr.MethodCallBackInfo(HashSetA1_SetEquals__IEnumerableT1_T, "SetEquals"),
        new JSMgr.MethodCallBackInfo(HashSetA1_SymmetricExceptWith__IEnumerableT1_T, "SymmetricExceptWith"),
        new JSMgr.MethodCallBackInfo(HashSetA1_TrimExcess, "TrimExcess"),
        new JSMgr.MethodCallBackInfo(HashSetA1_UnionWith__IEnumerableT1_T, "UnionWith"),
        new JSMgr.MethodCallBackInfo(HashSetA1_CreateSetComparer, "CreateSetComparer"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
