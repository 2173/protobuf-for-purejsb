
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_ParticleAnimator
{

////////////////////// ParticleAnimator ///////////////////////////////////////
// constructors

static bool ParticleAnimator_ParticleAnimator1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, new UnityEngine.ParticleAnimator());
    }

    return true;
}

// fields

// properties
static void ParticleAnimator_doesAnimateColor(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.doesAnimateColor;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.doesAnimateColor = arg0;
    }
}
static void ParticleAnimator_worldRotationAxis(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.worldRotationAxis;
                JSApi.setVector3S((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.worldRotationAxis = arg0;
    }
}
static void ParticleAnimator_localRotationAxis(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.localRotationAxis;
                JSApi.setVector3S((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.localRotationAxis = arg0;
    }
}
static void ParticleAnimator_sizeGrow(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.sizeGrow;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.sizeGrow = arg0;
    }
}
static void ParticleAnimator_rndForce(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.rndForce;
                JSApi.setVector3S((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.rndForce = arg0;
    }
}
static void ParticleAnimator_force(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.force;
                JSApi.setVector3S((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.force = arg0;
    }
}
static void ParticleAnimator_damping(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.damping;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.damping = arg0;
    }
}
static void ParticleAnimator_autodestruct(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.autodestruct;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.autodestruct = arg0;
    }
}
static void ParticleAnimator_colorAnimation(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        var result = _this.colorAnimation;
                var arrRet = result;
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSMgr.datax.setObject((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }
    else
    { 
        UnityEngine.Color[] arg0 = JSDataExchangeMgr.GetJSArg<UnityEngine.Color[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new UnityEngine.Color[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (UnityEngine.Color)JSMgr.datax.getObject((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        UnityEngine.ParticleAnimator _this = (UnityEngine.ParticleAnimator)vc.csObj;
        _this.colorAnimation = arg0;
    }
}

// methods


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.ParticleAnimator);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        ParticleAnimator_doesAnimateColor,
        ParticleAnimator_worldRotationAxis,
        ParticleAnimator_localRotationAxis,
        ParticleAnimator_sizeGrow,
        ParticleAnimator_rndForce,
        ParticleAnimator_force,
        ParticleAnimator_damping,
        ParticleAnimator_autodestruct,
        ParticleAnimator_colorAnimation,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(ParticleAnimator_ParticleAnimator1, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
