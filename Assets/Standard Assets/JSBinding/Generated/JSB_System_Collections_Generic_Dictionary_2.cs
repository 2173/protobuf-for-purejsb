
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.Serialization;

using jsval = JSApi.jsval;

public class JSB_System_Collections_Generic_Dictionary_2
{

////////////////////// Dictionary`2 ///////////////////////////////////////
// constructors
public static ConstructorID constructorID0 = new ConstructorID(null, null);

static bool DictionaryA2_DictionaryA21(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.Dictionary<,>), constructorID0); 
    if (constructor == null) return true;

    int len = argc - 2;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{}));
    }

    return true;
}
public static ConstructorID constructorID1 = new ConstructorID(new string[]{"IEqualityComparer`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool DictionaryA2_DictionaryA22(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.Dictionary<,>), constructorID1); 
    if (constructor == null) return true;

    int len = argc - 2;
    if (len == 1)
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0}));
    }

    return true;
}
public static ConstructorID constructorID2 = new ConstructorID(new string[]{"IDictionary`2"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool DictionaryA2_DictionaryA23(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.Dictionary<,>), constructorID2); 
    if (constructor == null) return true;

    int len = argc - 2;
    if (len == 1)
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0}));
    }

    return true;
}
public static ConstructorID constructorID3 = new ConstructorID(new string[]{"Int32"}, new TypeFlag[]{TypeFlag.None});

static bool DictionaryA2_DictionaryA24(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.Dictionary<,>), constructorID3); 
    if (constructor == null) return true;

    int len = argc - 2;
    if (len == 1)
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0}));
    }

    return true;
}
public static ConstructorID constructorID4 = new ConstructorID(new string[]{"IDictionary`2", "IEqualityComparer`1"}, new TypeFlag[]{TypeFlag.IsGenericType, TypeFlag.IsGenericType});

static bool DictionaryA2_DictionaryA25(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.Dictionary<,>), constructorID4); 
    if (constructor == null) return true;

    int len = argc - 2;
    if (len == 2)
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object arg1 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0, arg1}));
    }

    return true;
}
public static ConstructorID constructorID5 = new ConstructorID(new string[]{"Int32", "IEqualityComparer`1"}, new TypeFlag[]{TypeFlag.None, TypeFlag.IsGenericType});

static bool DictionaryA2_DictionaryA26(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.Dictionary<,>), constructorID5); 
    if (constructor == null) return true;

    int len = argc - 2;
    if (len == 2)
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object arg1 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0, arg1}));
    }

    return true;
}

// fields

// properties
public static PropertyID propertyID0 = new PropertyID("Count", "Int32", TypeFlag.None, null, null);
static void DictionaryA2_Count(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID0); 
    if (member == null) return;

        var result = member.GetValue(vc.csObj, new object[]{});
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}
public static PropertyID propertyID1 = new PropertyID("Item", "TValue", TypeFlag.IsT, new string[]{"TKey"}, new TypeFlag[]{TypeFlag.IsT});
static void DictionaryA2_Item_TKey(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID1); 
    if (member == null) return;

        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
    if (vc.bGet)
    { 
        var result = member.GetValue(vc.csObj, new object[]{arg0});
                JSMgr.datax.setWhatever((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        object arg1 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        member.SetValue(vc.csObj, arg1, new object[]{arg0});
    }
}
public static PropertyID propertyID2 = new PropertyID("Comparer", "IEqualityComparer`1", TypeFlag.None, null, null);
static void DictionaryA2_Comparer(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID2); 
    if (member == null) return;

        var result = member.GetValue(vc.csObj, new object[]{});
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
public static PropertyID propertyID3 = new PropertyID("Keys", "KeyCollection", TypeFlag.None, null, null);
static void DictionaryA2_Keys(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID3); 
    if (member == null) return;

        var result = member.GetValue(vc.csObj, new object[]{});
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
public static PropertyID propertyID4 = new PropertyID("Values", "ValueCollection", TypeFlag.None, null, null);
static void DictionaryA2_Values(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID4); 
    if (member == null) return;

        var result = member.GetValue(vc.csObj, new object[]{});
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}

// methods
public static MethodID methodID0 = new MethodID("Add", "Void", TypeFlag.None, new string[]{"TKey", "TValue"}, new TypeFlag[]{TypeFlag.IsT, TypeFlag.IsT});

static bool DictionaryA2_Add__TKey__TValue(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID0); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object arg1 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID1 = new MethodID("Clear", "Void", TypeFlag.None, null, null);

static bool DictionaryA2_Clear(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID1); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID2 = new MethodID("ContainsKey", "Boolean", TypeFlag.None, new string[]{"TKey"}, new TypeFlag[]{TypeFlag.IsT});

static bool DictionaryA2_ContainsKey__TKey(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID2); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID3 = new MethodID("ContainsValue", "Boolean", TypeFlag.None, new string[]{"TValue"}, new TypeFlag[]{TypeFlag.IsT});

static bool DictionaryA2_ContainsValue__TValue(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID3); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID4 = new MethodID("GetEnumerator", "Enumerator", TypeFlag.None, null, null);

static bool DictionaryA2_GetEnumerator(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID4); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static MethodID methodID5 = new MethodID("GetObjectData", "Void", TypeFlag.None, new string[]{"SerializationInfo", "StreamingContext"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None});

static bool DictionaryA2_GetObjectData__SerializationInfo__StreamingContext(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID5); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Runtime.Serialization.SerializationInfo arg0 = (System.Runtime.Serialization.SerializationInfo)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Runtime.Serialization.StreamingContext arg1 = (System.Runtime.Serialization.StreamingContext)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID6 = new MethodID("OnDeserialization", "Void", TypeFlag.None, new string[]{"Object"}, new TypeFlag[]{TypeFlag.None});

static bool DictionaryA2_OnDeserialization__Object(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID6); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        System.Object arg0 = (System.Object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID7 = new MethodID("Remove", "Boolean", TypeFlag.None, new string[]{"TKey"}, new TypeFlag[]{TypeFlag.IsT});

static bool DictionaryA2_Remove__TKey(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID7); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID8 = new MethodID("TryGetValue", "Boolean", TypeFlag.None, new string[]{"TKey", "TValue&"}, new TypeFlag[]{TypeFlag.IsT, TypeFlag.IsRef | TypeFlag.IsT | TypeFlag.IsOut});

static bool DictionaryA2_TryGetValue__TKey__TValue(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID8); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        int r_arg1 = JSApi.incArgIndex();
        object arg1 = null;
        object[] arr_t = new object[]{ arg0, arg1 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
        arg1 = arr_t[1];
        JSApi.setArgIndex(r_arg1);
        JSMgr.datax.setWhatever((int)JSApi.SetType.ArgRef, arg1);
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(System.Collections.Generic.Dictionary<,>);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        DictionaryA2_Count,
        DictionaryA2_Item_TKey,
        DictionaryA2_Comparer,
        DictionaryA2_Keys,
        DictionaryA2_Values,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(DictionaryA2_DictionaryA21, ".ctor"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_DictionaryA22, ".ctor"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_DictionaryA23, ".ctor"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_DictionaryA24, ".ctor"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_DictionaryA25, ".ctor"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_DictionaryA26, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(DictionaryA2_Add__TKey__TValue, "Add"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_Clear, "Clear"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_ContainsKey__TKey, "ContainsKey"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_ContainsValue__TValue, "ContainsValue"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_GetEnumerator, "GetEnumerator"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_GetObjectData__SerializationInfo__StreamingContext, "GetObjectData"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_OnDeserialization__Object, "OnDeserialization"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_Remove__TKey, "Remove"),
        new JSMgr.MethodCallBackInfo(DictionaryA2_TryGetValue__TKey__TValue, "TryGetValue"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
