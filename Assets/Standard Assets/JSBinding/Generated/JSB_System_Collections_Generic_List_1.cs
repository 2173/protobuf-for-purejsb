
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_System_Collections_Generic_List_1
{

////////////////////// List`1 ///////////////////////////////////////
// constructors
public static ConstructorID constructorID0 = new ConstructorID(null, null);

static bool ListA1_ListA11(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.List<>), constructorID0); 
    if (constructor == null) return true;

    int len = argc - 1;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{}));
    }

    return true;
}
public static ConstructorID constructorID1 = new ConstructorID(new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_ListA12(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.List<>), constructorID1); 
    if (constructor == null) return true;

    int len = argc - 1;
    if (len == 1)
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0}));
    }

    return true;
}
public static ConstructorID constructorID2 = new ConstructorID(new string[]{"Int32"}, new TypeFlag[]{TypeFlag.None});

static bool ListA1_ListA13(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.List<>), constructorID2); 
    if (constructor == null) return true;

    int len = argc - 1;
    if (len == 1)
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0}));
    }

    return true;
}

// fields

// properties
public static PropertyID propertyID0 = new PropertyID("Capacity", "Int32", TypeFlag.None, null, null);
static void ListA1_Capacity(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID0); 
    if (member == null) return;

    if (vc.bGet)
    { 
        var result = member.GetValue(vc.csObj, new object[]{});
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
    }
    else
    { 
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        member.SetValue(vc.csObj, arg0, new object[]{});
    }
}
static void ListA1_Count(JSVCall vc)
{
        UnityEngineManual.ListA1_Count(vc);
}
public static PropertyID propertyID2 = new PropertyID("Item", "T", TypeFlag.IsT, new string[]{"Int32"}, new TypeFlag[]{TypeFlag.None});
static void ListA1_Item_Int32(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID2); 
    if (member == null) return;

        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
    if (vc.bGet)
    { 
        var result = member.GetValue(vc.csObj, new object[]{arg0});
                JSMgr.datax.setWhatever((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        object arg1 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        member.SetValue(vc.csObj, arg1, new object[]{arg0});
    }
}

// methods
public static MethodID methodID0 = new MethodID("Add", "Void", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool ListA1_Add__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID0); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID1 = new MethodID("AddRange", "Void", TypeFlag.None, new string[]{"IEnumerable`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_AddRange__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID1); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID2 = new MethodID("AsReadOnly", "ReadOnlyCollection`1", TypeFlag.None, null, null);

static bool ListA1_AsReadOnly(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID2); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static MethodID methodID3 = new MethodID("BinarySearch", "Int32", TypeFlag.None, new string[]{"Int32", "Int32", "T", "IComparer`1"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None, TypeFlag.IsT, TypeFlag.IsGenericType});

static bool ListA1_BinarySearch__Int32__Int32__T__IComparerT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID3); 
    if (method == null) return true;

    int len = argc;
    if (len == 4) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object arg2 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object arg3 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1, arg2, arg3 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID4 = new MethodID("BinarySearch", "Int32", TypeFlag.None, new string[]{"T", "IComparer`1"}, new TypeFlag[]{TypeFlag.IsT, TypeFlag.IsGenericType});

static bool ListA1_BinarySearch__T__IComparerT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID4); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object arg1 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID5 = new MethodID("BinarySearch", "Int32", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool ListA1_BinarySearch__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID5); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID6 = new MethodID("Clear", "Void", TypeFlag.None, null, null);

static bool ListA1_Clear(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID6); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID7 = new MethodID("Contains", "Boolean", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool ListA1_Contains__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID7); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Converter<T, TOutput> ListA1_ConvertAll_GetDelegate_member8_arg0<T, TOutput>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Converter<T, TOutput>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (input) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, input);
            return (TOutput)JSMgr.datax.getWhatever((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID8 = new MethodID("ConvertAll", "List`1", TypeFlag.None, new string[]{"Converter`2"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_ConvertAllT1__ConverterT2_T_TOutput(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = JSDataExchangeMgr.makeGenericMethod(vc.csObj.GetType(), methodID8, 1); 
    if (method == null) return true;

    int len = argc - 1;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_ConvertAll_GetDelegate_member8_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static MethodID methodID9 = new MethodID("CopyTo", "Void", TypeFlag.None, new string[]{"Int32", "T[]", "Int32", "Int32"}, new TypeFlag[]{TypeFlag.None, TypeFlag.IsArray, TypeFlag.None, TypeFlag.None});

static bool ListA1_CopyTo__Int32__T_Array__Int32__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID9); 
    if (method == null) return true;

    int len = argc;
    if (len == 4) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object arg1 = JSDataExchangeMgr.GetJSArg<object[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new object[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg3 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1, arg2, arg3 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID10 = new MethodID("CopyTo", "Void", TypeFlag.None, new string[]{"T[]", "Int32"}, new TypeFlag[]{TypeFlag.IsArray, TypeFlag.None});

static bool ListA1_CopyTo__T_Array__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID10); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        object arg0 = JSDataExchangeMgr.GetJSArg<object[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new object[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID11 = new MethodID("CopyTo", "Void", TypeFlag.None, new string[]{"T[]"}, new TypeFlag[]{TypeFlag.IsArray});

static bool ListA1_CopyTo__T_Array(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID11); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = JSDataExchangeMgr.GetJSArg<object[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new object[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static Predicate<T> ListA1_Exists_GetDelegate_member12_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID12 = new MethodID("Exists", "Boolean", TypeFlag.None, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_Exists__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID12); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_Exists_GetDelegate_member12_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Predicate<T> ListA1_Find_GetDelegate_member13_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID13 = new MethodID("Find", "T", TypeFlag.IsT, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_Find__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID13); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_Find_GetDelegate_member13_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSMgr.datax.setWhatever((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static Predicate<T> ListA1_FindAll_GetDelegate_member14_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID14 = new MethodID("FindAll", "List`1", TypeFlag.None, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_FindAll__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID14); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_FindAll_GetDelegate_member14_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static Predicate<T> ListA1_FindIndex_GetDelegate_member15_arg2<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID15 = new MethodID("FindIndex", "Int32", TypeFlag.None, new string[]{"Int32", "Int32", "Predicate`1"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None, TypeFlag.IsGenericType});

static bool ListA1_FindIndex__Int32__Int32__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID15); 
    if (method == null) return true;

    int len = argc;
    if (len == 3) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
object arg2 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun2 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_FindIndex_GetDelegate_member15_arg2").MakeGenericMethod
            (method.GetParameters()[2].ParameterType.GetGenericArguments());
        return getDelegateFun2.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0, arg1, arg2 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Predicate<T> ListA1_FindIndex_GetDelegate_member16_arg1<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID16 = new MethodID("FindIndex", "Int32", TypeFlag.None, new string[]{"Int32", "Predicate`1"}, new TypeFlag[]{TypeFlag.None, TypeFlag.IsGenericType});

static bool ListA1_FindIndex__Int32__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID16); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
object arg1 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun1 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_FindIndex_GetDelegate_member16_arg1").MakeGenericMethod
            (method.GetParameters()[1].ParameterType.GetGenericArguments());
        return getDelegateFun1.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0, arg1 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Predicate<T> ListA1_FindIndex_GetDelegate_member17_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID17 = new MethodID("FindIndex", "Int32", TypeFlag.None, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_FindIndex__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID17); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_FindIndex_GetDelegate_member17_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Predicate<T> ListA1_FindLast_GetDelegate_member18_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID18 = new MethodID("FindLast", "T", TypeFlag.IsT, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_FindLast__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID18); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_FindLast_GetDelegate_member18_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSMgr.datax.setWhatever((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static Predicate<T> ListA1_FindLastIndex_GetDelegate_member19_arg2<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID19 = new MethodID("FindLastIndex", "Int32", TypeFlag.None, new string[]{"Int32", "Int32", "Predicate`1"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None, TypeFlag.IsGenericType});

static bool ListA1_FindLastIndex__Int32__Int32__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID19); 
    if (method == null) return true;

    int len = argc;
    if (len == 3) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
object arg2 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun2 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_FindLastIndex_GetDelegate_member19_arg2").MakeGenericMethod
            (method.GetParameters()[2].ParameterType.GetGenericArguments());
        return getDelegateFun2.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0, arg1, arg2 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Predicate<T> ListA1_FindLastIndex_GetDelegate_member20_arg1<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID20 = new MethodID("FindLastIndex", "Int32", TypeFlag.None, new string[]{"Int32", "Predicate`1"}, new TypeFlag[]{TypeFlag.None, TypeFlag.IsGenericType});

static bool ListA1_FindLastIndex__Int32__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID20); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
object arg1 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun1 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_FindLastIndex_GetDelegate_member20_arg1").MakeGenericMethod
            (method.GetParameters()[1].ParameterType.GetGenericArguments());
        return getDelegateFun1.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0, arg1 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Predicate<T> ListA1_FindLastIndex_GetDelegate_member21_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID21 = new MethodID("FindLastIndex", "Int32", TypeFlag.None, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_FindLastIndex__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID21); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_FindLastIndex_GetDelegate_member21_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Action<T> ListA1_ForEach_GetDelegate_member22_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Action<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID22 = new MethodID("ForEach", "Void", TypeFlag.None, new string[]{"Action`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_ForEach__ActionT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID22); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_ForEach_GetDelegate_member22_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID23 = new MethodID("GetEnumerator", "Enumerator", TypeFlag.None, null, null);

static bool ListA1_GetEnumerator(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID23); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static MethodID methodID24 = new MethodID("GetRange", "List`1", TypeFlag.None, new string[]{"Int32", "Int32"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None});

static bool ListA1_GetRange__Int32__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID24); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}
public static MethodID methodID25 = new MethodID("IndexOf", "Int32", TypeFlag.None, new string[]{"T", "Int32", "Int32"}, new TypeFlag[]{TypeFlag.IsT, TypeFlag.None, TypeFlag.None});

static bool ListA1_IndexOf__T__Int32__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID25); 
    if (method == null) return true;

    int len = argc;
    if (len == 3) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1, arg2 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID26 = new MethodID("IndexOf", "Int32", TypeFlag.None, new string[]{"T", "Int32"}, new TypeFlag[]{TypeFlag.IsT, TypeFlag.None});

static bool ListA1_IndexOf__T__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID26); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID27 = new MethodID("IndexOf", "Int32", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool ListA1_IndexOf__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID27); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID28 = new MethodID("Insert", "Void", TypeFlag.None, new string[]{"Int32", "T"}, new TypeFlag[]{TypeFlag.None, TypeFlag.IsT});

static bool ListA1_Insert__Int32__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID28); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object arg1 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID29 = new MethodID("InsertRange", "Void", TypeFlag.None, new string[]{"Int32", "IEnumerable`1"}, new TypeFlag[]{TypeFlag.None, TypeFlag.IsGenericType});

static bool ListA1_InsertRange__Int32__IEnumerableT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID29); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object arg1 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID30 = new MethodID("LastIndexOf", "Int32", TypeFlag.None, new string[]{"T", "Int32", "Int32"}, new TypeFlag[]{TypeFlag.IsT, TypeFlag.None, TypeFlag.None});

static bool ListA1_LastIndexOf__T__Int32__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID30); 
    if (method == null) return true;

    int len = argc;
    if (len == 3) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1, arg2 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID31 = new MethodID("LastIndexOf", "Int32", TypeFlag.None, new string[]{"T", "Int32"}, new TypeFlag[]{TypeFlag.IsT, TypeFlag.None});

static bool ListA1_LastIndexOf__T__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID31); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID32 = new MethodID("LastIndexOf", "Int32", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool ListA1_LastIndexOf__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID32); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID33 = new MethodID("Remove", "Boolean", TypeFlag.None, new string[]{"T"}, new TypeFlag[]{TypeFlag.IsT});

static bool ListA1_Remove__T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID33); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static Predicate<T> ListA1_RemoveAll_GetDelegate_member34_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID34 = new MethodID("RemoveAll", "Int32", TypeFlag.None, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_RemoveAll__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID34); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_RemoveAll_GetDelegate_member34_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}
public static MethodID methodID35 = new MethodID("RemoveAt", "Void", TypeFlag.None, new string[]{"Int32"}, new TypeFlag[]{TypeFlag.None});

static bool ListA1_RemoveAt__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID35); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID36 = new MethodID("RemoveRange", "Void", TypeFlag.None, new string[]{"Int32", "Int32"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None});

static bool ListA1_RemoveRange__Int32__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID36); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID37 = new MethodID("Reverse", "Void", TypeFlag.None, new string[]{"Int32", "Int32"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None});

static bool ListA1_Reverse__Int32__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID37); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID38 = new MethodID("Reverse", "Void", TypeFlag.None, null, null);

static bool ListA1_Reverse(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID38); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID39 = new MethodID("Sort", "Void", TypeFlag.None, new string[]{"Int32", "Int32", "IComparer`1"}, new TypeFlag[]{TypeFlag.None, TypeFlag.None, TypeFlag.IsGenericType});

static bool ListA1_Sort__Int32__Int32__IComparerT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID39); 
    if (method == null) return true;

    int len = argc;
    if (len == 3) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object arg2 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1, arg2 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static Comparison<T> ListA1_Sort_GetDelegate_member40_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Comparison<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (x, y) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, x, y);
            return (System.Int32)JSApi.getInt32((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID40 = new MethodID("Sort", "Void", TypeFlag.None, new string[]{"Comparison`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_Sort__ComparisonT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID40); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_Sort_GetDelegate_member40_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID41 = new MethodID("Sort", "Void", TypeFlag.None, new string[]{"IComparer`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_Sort__IComparerT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID41); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID42 = new MethodID("Sort", "Void", TypeFlag.None, null, null);

static bool ListA1_Sort(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID42); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID43 = new MethodID("ToArray", "T[]", TypeFlag.None, null, null);

static bool ListA1_ToArray(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID43); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
                var arrRet = (Array)method.Invoke(vc.csObj, arr_t);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSMgr.datax.setWhatever((int)JSApi.SetType.SaveAndTempTrace, arrRet.GetValue(i));
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}
public static MethodID methodID44 = new MethodID("TrimExcess", "Void", TypeFlag.None, null, null);

static bool ListA1_TrimExcess(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID44); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static Predicate<T> ListA1_TrueForAll_GetDelegate_member45_arg0<T>(CSRepresentedObject objFunction)
{
    if (objFunction == null || objFunction.jsObjID == 0)
    {
        return null;
    }
    var action = JSMgr.getJSFunCSDelegateRel<Predicate<T>>(objFunction.jsObjID);
    if (action == null)
    {
        action = (obj) => 
        {
            JSMgr.vCall.CallJSFunctionValue(0, objFunction.jsObjID, obj);
            return (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.JSFunRet);
        };
        JSMgr.addJSFunCSDelegateRel(objFunction.jsObjID, action);
    }
    return action;
}
public static MethodID methodID45 = new MethodID("TrueForAll", "Boolean", TypeFlag.None, new string[]{"Predicate`1"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ListA1_TrueForAll__PredicateT1_T(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID45); 
    if (method == null) return true;

    int len = argc;
    if (len == 1) 
    {
object arg0 = JSDataExchangeMgr.GetJSArg<object>(()=>{
    if (JSApi.isFunctionS((int)JSApi.GetType.Arg)) {
        var getDelegateFun0 = typeof(JSB_System_Collections_Generic_List_1).GetMethod("ListA1_TrueForAll_GetDelegate_member45_arg0").MakeGenericMethod
            (method.GetParameters()[0].ParameterType.GetGenericArguments());
        return getDelegateFun0.Invoke(null, new object[]{JSApi.getFunctionS((int)JSApi.GetType.Arg)});
    }
    else
        return JSMgr.datax.getObject((int)JSApi.GetType.Arg);
});
        object[] arr_t = new object[]{ arg0 };
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(method.Invoke(vc.csObj, arr_t)));
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(System.Collections.Generic.List<>);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        ListA1_Capacity,
        ListA1_Count,
        ListA1_Item_Int32,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(ListA1_ListA11, ".ctor"),
        new JSMgr.MethodCallBackInfo(ListA1_ListA12, ".ctor"),
        new JSMgr.MethodCallBackInfo(ListA1_ListA13, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(ListA1_Add__T, "Add"),
        new JSMgr.MethodCallBackInfo(ListA1_AddRange__IEnumerableT1_T, "AddRange"),
        new JSMgr.MethodCallBackInfo(ListA1_AsReadOnly, "AsReadOnly"),
        new JSMgr.MethodCallBackInfo(ListA1_BinarySearch__Int32__Int32__T__IComparerT1_T, "BinarySearch"),
        new JSMgr.MethodCallBackInfo(ListA1_BinarySearch__T__IComparerT1_T, "BinarySearch"),
        new JSMgr.MethodCallBackInfo(ListA1_BinarySearch__T, "BinarySearch"),
        new JSMgr.MethodCallBackInfo(ListA1_Clear, "Clear"),
        new JSMgr.MethodCallBackInfo(ListA1_Contains__T, "Contains"),
        new JSMgr.MethodCallBackInfo(ListA1_ConvertAllT1__ConverterT2_T_TOutput, "ConvertAll"),
        new JSMgr.MethodCallBackInfo(ListA1_CopyTo__Int32__T_Array__Int32__Int32, "CopyTo"),
        new JSMgr.MethodCallBackInfo(ListA1_CopyTo__T_Array__Int32, "CopyTo"),
        new JSMgr.MethodCallBackInfo(ListA1_CopyTo__T_Array, "CopyTo"),
        new JSMgr.MethodCallBackInfo(ListA1_Exists__PredicateT1_T, "Exists"),
        new JSMgr.MethodCallBackInfo(ListA1_Find__PredicateT1_T, "Find"),
        new JSMgr.MethodCallBackInfo(ListA1_FindAll__PredicateT1_T, "FindAll"),
        new JSMgr.MethodCallBackInfo(ListA1_FindIndex__Int32__Int32__PredicateT1_T, "FindIndex"),
        new JSMgr.MethodCallBackInfo(ListA1_FindIndex__Int32__PredicateT1_T, "FindIndex"),
        new JSMgr.MethodCallBackInfo(ListA1_FindIndex__PredicateT1_T, "FindIndex"),
        new JSMgr.MethodCallBackInfo(ListA1_FindLast__PredicateT1_T, "FindLast"),
        new JSMgr.MethodCallBackInfo(ListA1_FindLastIndex__Int32__Int32__PredicateT1_T, "FindLastIndex"),
        new JSMgr.MethodCallBackInfo(ListA1_FindLastIndex__Int32__PredicateT1_T, "FindLastIndex"),
        new JSMgr.MethodCallBackInfo(ListA1_FindLastIndex__PredicateT1_T, "FindLastIndex"),
        new JSMgr.MethodCallBackInfo(ListA1_ForEach__ActionT1_T, "ForEach"),
        new JSMgr.MethodCallBackInfo(ListA1_GetEnumerator, "GetEnumerator"),
        new JSMgr.MethodCallBackInfo(ListA1_GetRange__Int32__Int32, "GetRange"),
        new JSMgr.MethodCallBackInfo(ListA1_IndexOf__T__Int32__Int32, "IndexOf"),
        new JSMgr.MethodCallBackInfo(ListA1_IndexOf__T__Int32, "IndexOf"),
        new JSMgr.MethodCallBackInfo(ListA1_IndexOf__T, "IndexOf"),
        new JSMgr.MethodCallBackInfo(ListA1_Insert__Int32__T, "Insert"),
        new JSMgr.MethodCallBackInfo(ListA1_InsertRange__Int32__IEnumerableT1_T, "InsertRange"),
        new JSMgr.MethodCallBackInfo(ListA1_LastIndexOf__T__Int32__Int32, "LastIndexOf"),
        new JSMgr.MethodCallBackInfo(ListA1_LastIndexOf__T__Int32, "LastIndexOf"),
        new JSMgr.MethodCallBackInfo(ListA1_LastIndexOf__T, "LastIndexOf"),
        new JSMgr.MethodCallBackInfo(ListA1_Remove__T, "Remove"),
        new JSMgr.MethodCallBackInfo(ListA1_RemoveAll__PredicateT1_T, "RemoveAll"),
        new JSMgr.MethodCallBackInfo(ListA1_RemoveAt__Int32, "RemoveAt"),
        new JSMgr.MethodCallBackInfo(ListA1_RemoveRange__Int32__Int32, "RemoveRange"),
        new JSMgr.MethodCallBackInfo(ListA1_Reverse__Int32__Int32, "Reverse"),
        new JSMgr.MethodCallBackInfo(ListA1_Reverse, "Reverse"),
        new JSMgr.MethodCallBackInfo(ListA1_Sort__Int32__Int32__IComparerT1_T, "Sort"),
        new JSMgr.MethodCallBackInfo(ListA1_Sort__ComparisonT1_T, "Sort"),
        new JSMgr.MethodCallBackInfo(ListA1_Sort__IComparerT1_T, "Sort"),
        new JSMgr.MethodCallBackInfo(ListA1_Sort, "Sort"),
        new JSMgr.MethodCallBackInfo(ListA1_ToArray, "ToArray"),
        new JSMgr.MethodCallBackInfo(ListA1_TrimExcess, "TrimExcess"),
        new JSMgr.MethodCallBackInfo(ListA1_TrueForAll__PredicateT1_T, "TrueForAll"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
