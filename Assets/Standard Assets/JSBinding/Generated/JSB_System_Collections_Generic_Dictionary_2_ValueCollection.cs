
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_System_Collections_Generic_Dictionary_2_ValueCollection
{

////////////////////// ValueCollection ///////////////////////////////////////
// constructors
public static ConstructorID constructorID0 = new ConstructorID(new string[]{"Dictionary`2"}, new TypeFlag[]{TypeFlag.IsGenericType});

static bool ValueCollection_ValueCollection1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    ConstructorInfo constructor = JSDataExchangeMgr.makeGenericConstructor(typeof(System.Collections.Generic.Dictionary<,>.ValueCollection), constructorID0); 
    if (constructor == null) return true;

    int len = argc - 2;
    if (len == 1)
    {
        object arg0 = (object)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, constructor.Invoke(null, new object[]{arg0}));
    }

    return true;
}

// fields

// properties
public static PropertyID propertyID0 = new PropertyID("Count", "Int32", TypeFlag.None, null, null);
static void ValueCollection_Count(JSVCall vc)
{
    PropertyInfo member = GenericTypeCache.getProperty(vc.csObj.GetType(), propertyID0); 
    if (member == null) return;

        var result = member.GetValue(vc.csObj, new object[]{});
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}

// methods
public static MethodID methodID0 = new MethodID("CopyTo", "Void", TypeFlag.None, new string[]{"TValue[]", "Int32"}, new TypeFlag[]{TypeFlag.IsArray, TypeFlag.None});

static bool ValueCollection_CopyTo__TValue_Array__Int32(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID0); 
    if (method == null) return true;

    int len = argc;
    if (len == 2) 
    {
        object arg0 = JSDataExchangeMgr.GetJSArg<object[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new object[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (object)JSMgr.datax.getWhatever((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        object[] arr_t = new object[]{ arg0, arg1 };
        method.Invoke(vc.csObj, arr_t);
    }

    return true;
}
public static MethodID methodID1 = new MethodID("GetEnumerator", "Enumerator", TypeFlag.None, null, null);

static bool ValueCollection_GetEnumerator(JSVCall vc, int argc)
{
    // Get generic method by name and param count.
    MethodInfo method = GenericTypeCache.getMethod(vc.csObj.GetType(), methodID1); 
    if (method == null) return true;

    int len = argc;
    if (len == 0) 
    {
        object[] arr_t = null;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, method.Invoke(vc.csObj, arr_t));
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(System.Collections.Generic.Dictionary<,>.ValueCollection);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        ValueCollection_Count,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(ValueCollection_ValueCollection1, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(ValueCollection_CopyTo__TValue_Array__Int32, "CopyTo"),
        new JSMgr.MethodCallBackInfo(ValueCollection_GetEnumerator, "GetEnumerator"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
