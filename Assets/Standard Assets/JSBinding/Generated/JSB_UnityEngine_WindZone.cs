
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_WindZone
{

////////////////////// WindZone ///////////////////////////////////////
// constructors

static bool WindZone_WindZone1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, new UnityEngine.WindZone());
    }

    return true;
}

// fields

// properties
static void WindZone_mode(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        var result = _this.mode;
                JSApi.setEnum((int)JSApi.SetType.Rval, (int)result);
    }
    else
    { 
        UnityEngine.WindZoneMode arg0 = (UnityEngine.WindZoneMode)JSApi.getEnum((int)JSApi.GetType.Arg);
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        _this.mode = arg0;
    }
}
static void WindZone_radius(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        var result = _this.radius;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        _this.radius = arg0;
    }
}
static void WindZone_windMain(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        var result = _this.windMain;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        _this.windMain = arg0;
    }
}
static void WindZone_windTurbulence(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        var result = _this.windTurbulence;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        _this.windTurbulence = arg0;
    }
}
static void WindZone_windPulseMagnitude(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        var result = _this.windPulseMagnitude;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        _this.windPulseMagnitude = arg0;
    }
}
static void WindZone_windPulseFrequency(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        var result = _this.windPulseFrequency;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.WindZone _this = (UnityEngine.WindZone)vc.csObj;
        _this.windPulseFrequency = arg0;
    }
}

// methods


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.WindZone);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        WindZone_mode,
        WindZone_radius,
        WindZone_windMain,
        WindZone_windTurbulence,
        WindZone_windPulseMagnitude,
        WindZone_windPulseFrequency,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(WindZone_WindZone1, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
