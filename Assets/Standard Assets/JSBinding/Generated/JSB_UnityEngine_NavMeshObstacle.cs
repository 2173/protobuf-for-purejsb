
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_NavMeshObstacle
{

////////////////////// NavMeshObstacle ///////////////////////////////////////
// constructors

static bool NavMeshObstacle_NavMeshObstacle1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, new UnityEngine.NavMeshObstacle());
    }

    return true;
}

// fields

// properties
static void NavMeshObstacle_height(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.height;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.height = arg0;
    }
}
static void NavMeshObstacle_radius(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.radius;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.radius = arg0;
    }
}
static void NavMeshObstacle_velocity(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.velocity;
                JSApi.setVector3S((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.velocity = arg0;
    }
}
static void NavMeshObstacle_carving(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.carving;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.carving = arg0;
    }
}
static void NavMeshObstacle_carveOnlyStationary(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.carveOnlyStationary;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.carveOnlyStationary = arg0;
    }
}
static void NavMeshObstacle_carvingMoveThreshold(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.carvingMoveThreshold;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.carvingMoveThreshold = arg0;
    }
}
static void NavMeshObstacle_carvingTimeToStationary(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.carvingTimeToStationary;
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(result));
    }
    else
    { 
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.carvingTimeToStationary = arg0;
    }
}
static void NavMeshObstacle_shape(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.shape;
                JSApi.setEnum((int)JSApi.SetType.Rval, (int)result);
    }
    else
    { 
        UnityEngine.NavMeshObstacleShape arg0 = (UnityEngine.NavMeshObstacleShape)JSApi.getEnum((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.shape = arg0;
    }
}
static void NavMeshObstacle_center(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.center;
                JSApi.setVector3S((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.center = arg0;
    }
}
static void NavMeshObstacle_size(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        var result = _this.size;
                JSApi.setVector3S((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.NavMeshObstacle _this = (UnityEngine.NavMeshObstacle)vc.csObj;
        _this.size = arg0;
    }
}

// methods


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.NavMeshObstacle);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        NavMeshObstacle_height,
        NavMeshObstacle_radius,
        NavMeshObstacle_velocity,
        NavMeshObstacle_carving,
        NavMeshObstacle_carveOnlyStationary,
        NavMeshObstacle_carvingMoveThreshold,
        NavMeshObstacle_carvingTimeToStationary,
        NavMeshObstacle_shape,
        NavMeshObstacle_center,
        NavMeshObstacle_size,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(NavMeshObstacle_NavMeshObstacle1, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
