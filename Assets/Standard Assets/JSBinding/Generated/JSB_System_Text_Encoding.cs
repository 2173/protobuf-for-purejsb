
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

using jsval = JSApi.jsval;

public class JSB_System_Text_Encoding
{

////////////////////// Encoding ///////////////////////////////////////
// constructors

// fields

// properties
static void Encoding_IsReadOnly(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.IsReadOnly;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
}
static void Encoding_IsSingleByte(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.IsSingleByte;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
}
static void Encoding_DecoderFallback(JSVCall vc)
{
    if (vc.bGet)
    { 
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.DecoderFallback;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        System.Text.DecoderFallback arg0 = (System.Text.DecoderFallback)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        _this.DecoderFallback = arg0;
    }
}
static void Encoding_EncoderFallback(JSVCall vc)
{
    if (vc.bGet)
    { 
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.EncoderFallback;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        System.Text.EncoderFallback arg0 = (System.Text.EncoderFallback)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        _this.EncoderFallback = arg0;
    }
}
static void Encoding_BodyName(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.BodyName;
                JSApi.setStringS((int)JSApi.SetType.Rval, result);
}
static void Encoding_CodePage(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.CodePage;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}
static void Encoding_EncodingName(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.EncodingName;
                JSApi.setStringS((int)JSApi.SetType.Rval, result);
}
static void Encoding_HeaderName(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.HeaderName;
                JSApi.setStringS((int)JSApi.SetType.Rval, result);
}
static void Encoding_IsBrowserDisplay(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.IsBrowserDisplay;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
}
static void Encoding_IsBrowserSave(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.IsBrowserSave;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
}
static void Encoding_IsMailNewsDisplay(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.IsMailNewsDisplay;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
}
static void Encoding_IsMailNewsSave(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.IsMailNewsSave;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
}
static void Encoding_WebName(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.WebName;
                JSApi.setStringS((int)JSApi.SetType.Rval, result);
}
static void Encoding_WindowsCodePage(JSVCall vc)
{
        System.Text.Encoding _this = (System.Text.Encoding)vc.csObj;
        var result = _this.WindowsCodePage;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}
static void Encoding_ASCII(JSVCall vc)
{
        var result = System.Text.Encoding.ASCII;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
static void Encoding_BigEndianUnicode(JSVCall vc)
{
        var result = System.Text.Encoding.BigEndianUnicode;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
static void Encoding_Default(JSVCall vc)
{
        var result = System.Text.Encoding.Default;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
static void Encoding_UTF7(JSVCall vc)
{
        var result = System.Text.Encoding.UTF7;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
static void Encoding_UTF8(JSVCall vc)
{
        var result = System.Text.Encoding.UTF8;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
static void Encoding_Unicode(JSVCall vc)
{
        var result = System.Text.Encoding.Unicode;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
static void Encoding_UTF32(JSVCall vc)
{
        var result = System.Text.Encoding.UTF32;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}

// methods

static bool Encoding_Clone(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSMgr.datax.setWhatever((int)JSApi.SetType.Rval, ((System.Text.Encoding)vc.csObj).Clone());
    }

    return true;
}

static bool Encoding_Equals__Object(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Object arg0 = (System.Object)JSMgr.datax.getWhatever((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((System.Text.Encoding)vc.csObj).Equals(arg0)));
    }

    return true;
}

static bool Encoding_GetByteCount__Char_Array__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Char[] arg0 = JSDataExchangeMgr.GetJSArg<System.Char[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Char[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Char)JSApi.getChar((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetByteCount(arg0, arg1, arg2)));
    }

    return true;
}

static bool Encoding_GetByteCount__Char_Array(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Char[] arg0 = JSDataExchangeMgr.GetJSArg<System.Char[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Char[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Char)JSApi.getChar((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetByteCount(arg0)));
    }

    return true;
}

static bool Encoding_GetByteCount__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetByteCount(arg0)));
    }

    return true;
}

static bool Encoding_GetBytes__String__Int32__Int32__Byte_Array__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 5) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Byte[] arg3 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg4 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetBytes(arg0, arg1, arg2, arg3, arg4)));
    }

    return true;
}

static bool Encoding_GetBytes__Char_Array__Int32__Int32__Byte_Array__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 5) 
    {
        System.Char[] arg0 = JSDataExchangeMgr.GetJSArg<System.Char[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Char[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Char)JSApi.getChar((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Byte[] arg3 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg4 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetBytes(arg0, arg1, arg2, arg3, arg4)));
    }

    return true;
}

static bool Encoding_GetBytes__Char_Array__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Char[] arg0 = JSDataExchangeMgr.GetJSArg<System.Char[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Char[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Char)JSApi.getChar((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                var arrRet = ((System.Text.Encoding)vc.csObj).GetBytes(arg0, arg1, arg2);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setByte((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool Encoding_GetBytes__Char_Array(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Char[] arg0 = JSDataExchangeMgr.GetJSArg<System.Char[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Char[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Char)JSApi.getChar((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
                var arrRet = ((System.Text.Encoding)vc.csObj).GetBytes(arg0);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setByte((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool Encoding_GetBytes__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                var arrRet = ((System.Text.Encoding)vc.csObj).GetBytes(arg0);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setByte((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool Encoding_GetCharCount__Byte_Array__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Byte[] arg0 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetCharCount(arg0, arg1, arg2)));
    }

    return true;
}

static bool Encoding_GetCharCount__Byte_Array(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Byte[] arg0 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetCharCount(arg0)));
    }

    return true;
}

static bool Encoding_GetChars__Byte_Array__Int32__Int32__Char_Array__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 5) 
    {
        System.Byte[] arg0 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Char[] arg3 = JSDataExchangeMgr.GetJSArg<System.Char[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Char[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Char)JSApi.getChar((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg4 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetChars(arg0, arg1, arg2, arg3, arg4)));
    }

    return true;
}

static bool Encoding_GetChars__Byte_Array__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Byte[] arg0 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                var arrRet = ((System.Text.Encoding)vc.csObj).GetChars(arg0, arg1, arg2);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setChar((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool Encoding_GetChars__Byte_Array(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Byte[] arg0 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
                var arrRet = ((System.Text.Encoding)vc.csObj).GetChars(arg0);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setChar((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool Encoding_GetDecoder(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, ((System.Text.Encoding)vc.csObj).GetDecoder());
    }

    return true;
}

static bool Encoding_GetEncoder(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, ((System.Text.Encoding)vc.csObj).GetEncoder());
    }

    return true;
}

static bool Encoding_GetHashCode(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetHashCode()));
    }

    return true;
}

static bool Encoding_GetMaxByteCount__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetMaxByteCount(arg0)));
    }

    return true;
}

static bool Encoding_GetMaxCharCount__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((System.Text.Encoding)vc.csObj).GetMaxCharCount(arg0)));
    }

    return true;
}

static bool Encoding_GetPreamble(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                var arrRet = ((System.Text.Encoding)vc.csObj).GetPreamble();
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setByte((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool Encoding_GetString__Byte_Array__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Byte[] arg0 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setStringS((int)JSApi.SetType.Rval, ((System.Text.Encoding)vc.csObj).GetString(arg0, arg1, arg2));
    }

    return true;
}

static bool Encoding_GetString__Byte_Array(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Byte[] arg0 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
                JSApi.setStringS((int)JSApi.SetType.Rval, ((System.Text.Encoding)vc.csObj).GetString(arg0));
    }

    return true;
}

static bool Encoding_IsAlwaysNormalized__NormalizationForm(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Text.NormalizationForm arg0 = (System.Text.NormalizationForm)JSApi.getEnum((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((System.Text.Encoding)vc.csObj).IsAlwaysNormalized(arg0)));
    }

    return true;
}

static bool Encoding_IsAlwaysNormalized(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((System.Text.Encoding)vc.csObj).IsAlwaysNormalized()));
    }

    return true;
}

static bool Encoding_Convert__Encoding__Encoding__Byte_Array__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 5) 
    {
        System.Text.Encoding arg0 = (System.Text.Encoding)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Text.Encoding arg1 = (System.Text.Encoding)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Byte[] arg2 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
        System.Int32 arg3 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg4 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                var arrRet = System.Text.Encoding.Convert(arg0, arg1, arg2, arg3, arg4);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setByte((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool Encoding_Convert__Encoding__Encoding__Byte_Array(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Text.Encoding arg0 = (System.Text.Encoding)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Text.Encoding arg1 = (System.Text.Encoding)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Byte[] arg2 = JSDataExchangeMgr.GetJSArg<System.Byte[]>(() =>
        {
            int jsObjID = JSApi.getObject((int)JSApi.GetType.Arg);
            int length = JSApi.getArrayLength(jsObjID);
            var ret = new System.Byte[length];
            for (var i = 0; i < length; i++) {
                JSApi.getElement(jsObjID, i);
                ret[i] = (System.Byte)JSApi.getByte((int)JSApi.GetType.SaveAndRemove);
            }
            return ret;
        });
                var arrRet = System.Text.Encoding.Convert(arg0, arg1, arg2);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSApi.setByte((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool Encoding_GetEncoding__Int32__EncoderFallback__DecoderFallback(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Text.EncoderFallback arg1 = (System.Text.EncoderFallback)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Text.DecoderFallback arg2 = (System.Text.DecoderFallback)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, System.Text.Encoding.GetEncoding(arg0, arg1, arg2));
    }

    return true;
}

static bool Encoding_GetEncoding__String__EncoderFallback__DecoderFallback(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Text.EncoderFallback arg1 = (System.Text.EncoderFallback)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Text.DecoderFallback arg2 = (System.Text.DecoderFallback)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, System.Text.Encoding.GetEncoding(arg0, arg1, arg2));
    }

    return true;
}

static bool Encoding_GetEncoding__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, System.Text.Encoding.GetEncoding(arg0));
    }

    return true;
}

static bool Encoding_GetEncoding__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, System.Text.Encoding.GetEncoding(arg0));
    }

    return true;
}

static bool Encoding_GetEncodings(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                var arrRet = System.Text.Encoding.GetEncodings();
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSMgr.datax.setObject((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(System.Text.Encoding);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        Encoding_IsReadOnly,
        Encoding_IsSingleByte,
        Encoding_DecoderFallback,
        Encoding_EncoderFallback,
        Encoding_BodyName,
        Encoding_CodePage,
        Encoding_EncodingName,
        Encoding_HeaderName,
        Encoding_IsBrowserDisplay,
        Encoding_IsBrowserSave,
        Encoding_IsMailNewsDisplay,
        Encoding_IsMailNewsSave,
        Encoding_WebName,
        Encoding_WindowsCodePage,
        Encoding_ASCII,
        Encoding_BigEndianUnicode,
        Encoding_Default,
        Encoding_UTF7,
        Encoding_UTF8,
        Encoding_Unicode,
        Encoding_UTF32,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(Encoding_Clone, "Clone"),
        new JSMgr.MethodCallBackInfo(Encoding_Equals__Object, "Equals"),
        new JSMgr.MethodCallBackInfo(Encoding_GetByteCount__Char_Array__Int32__Int32, "GetByteCount"),
        new JSMgr.MethodCallBackInfo(Encoding_GetByteCount__Char_Array, "GetByteCount"),
        new JSMgr.MethodCallBackInfo(Encoding_GetByteCount__String, "GetByteCount"),
        new JSMgr.MethodCallBackInfo(Encoding_GetBytes__String__Int32__Int32__Byte_Array__Int32, "GetBytes"),
        new JSMgr.MethodCallBackInfo(Encoding_GetBytes__Char_Array__Int32__Int32__Byte_Array__Int32, "GetBytes"),
        new JSMgr.MethodCallBackInfo(Encoding_GetBytes__Char_Array__Int32__Int32, "GetBytes"),
        new JSMgr.MethodCallBackInfo(Encoding_GetBytes__Char_Array, "GetBytes"),
        new JSMgr.MethodCallBackInfo(Encoding_GetBytes__String, "GetBytes"),
        new JSMgr.MethodCallBackInfo(Encoding_GetCharCount__Byte_Array__Int32__Int32, "GetCharCount"),
        new JSMgr.MethodCallBackInfo(Encoding_GetCharCount__Byte_Array, "GetCharCount"),
        new JSMgr.MethodCallBackInfo(Encoding_GetChars__Byte_Array__Int32__Int32__Char_Array__Int32, "GetChars"),
        new JSMgr.MethodCallBackInfo(Encoding_GetChars__Byte_Array__Int32__Int32, "GetChars"),
        new JSMgr.MethodCallBackInfo(Encoding_GetChars__Byte_Array, "GetChars"),
        new JSMgr.MethodCallBackInfo(Encoding_GetDecoder, "GetDecoder"),
        new JSMgr.MethodCallBackInfo(Encoding_GetEncoder, "GetEncoder"),
        new JSMgr.MethodCallBackInfo(Encoding_GetHashCode, "GetHashCode"),
        new JSMgr.MethodCallBackInfo(Encoding_GetMaxByteCount__Int32, "GetMaxByteCount"),
        new JSMgr.MethodCallBackInfo(Encoding_GetMaxCharCount__Int32, "GetMaxCharCount"),
        new JSMgr.MethodCallBackInfo(Encoding_GetPreamble, "GetPreamble"),
        new JSMgr.MethodCallBackInfo(Encoding_GetString__Byte_Array__Int32__Int32, "GetString"),
        new JSMgr.MethodCallBackInfo(Encoding_GetString__Byte_Array, "GetString"),
        new JSMgr.MethodCallBackInfo(Encoding_IsAlwaysNormalized__NormalizationForm, "IsAlwaysNormalized"),
        new JSMgr.MethodCallBackInfo(Encoding_IsAlwaysNormalized, "IsAlwaysNormalized"),
        new JSMgr.MethodCallBackInfo(Encoding_Convert__Encoding__Encoding__Byte_Array__Int32__Int32, "Convert"),
        new JSMgr.MethodCallBackInfo(Encoding_Convert__Encoding__Encoding__Byte_Array, "Convert"),
        new JSMgr.MethodCallBackInfo(Encoding_GetEncoding__Int32__EncoderFallback__DecoderFallback, "GetEncoding"),
        new JSMgr.MethodCallBackInfo(Encoding_GetEncoding__String__EncoderFallback__DecoderFallback, "GetEncoding"),
        new JSMgr.MethodCallBackInfo(Encoding_GetEncoding__Int32, "GetEncoding"),
        new JSMgr.MethodCallBackInfo(Encoding_GetEncoding__String, "GetEncoding"),
        new JSMgr.MethodCallBackInfo(Encoding_GetEncodings, "GetEncodings"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
