
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine.Experimental.Director;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_Experimental_Director_IAnimatorControllerPlayable
{

////////////////////// IAnimatorControllerPlayable ///////////////////////////////////////
// constructors

// fields

// properties
static void IAnimatorControllerPlayable_layerCount(JSVCall vc)
{
        UnityEngine.Experimental.Director.IAnimatorControllerPlayable _this = (UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj;
        var result = _this.layerCount;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}
static void IAnimatorControllerPlayable_parameterCount(JSVCall vc)
{
        UnityEngine.Experimental.Director.IAnimatorControllerPlayable _this = (UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj;
        var result = _this.parameterCount;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}

// methods

static bool IAnimatorControllerPlayable_CrossFade__Int32__Single__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg3 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).CrossFade(arg0, arg1, arg2, arg3);
    }

    return true;
}

static bool IAnimatorControllerPlayable_CrossFade__String__Single__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg3 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).CrossFade(arg0, arg1, arg2, arg3);
    }

    return true;
}

static bool IAnimatorControllerPlayable_CrossFadeInFixedTime__String__Single__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg3 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).CrossFadeInFixedTime(arg0, arg1, arg2, arg3);
    }

    return true;
}

static bool IAnimatorControllerPlayable_CrossFadeInFixedTime__Int32__Single__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg3 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).CrossFadeInFixedTime(arg0, arg1, arg2, arg3);
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetAnimatorTransitionInfo__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetAnimatorTransitionInfo(arg0));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetBool__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetBool(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetBool__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetBool(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetCurrentAnimatorClipInfo__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                var arrRet = ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetCurrentAnimatorClipInfo(arg0);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSMgr.datax.setObject((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetCurrentAnimatorStateInfo__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetCurrentAnimatorStateInfo(arg0));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetFloat__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetFloat(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetFloat__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetFloat(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetInteger__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetInteger(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetInteger__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetInteger(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetLayerIndex__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetLayerIndex(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetLayerName__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setStringS((int)JSApi.SetType.Rval, ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetLayerName(arg0));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetLayerWeight__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setSingle((int)JSApi.SetType.Rval, (System.Single)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetLayerWeight(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetNextAnimatorClipInfo__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                var arrRet = ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetNextAnimatorClipInfo(arg0);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSMgr.datax.setObject((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetNextAnimatorStateInfo__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetNextAnimatorStateInfo(arg0));
    }

    return true;
}

static bool IAnimatorControllerPlayable_GetParameter__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).GetParameter(arg0));
    }

    return true;
}

static bool IAnimatorControllerPlayable_HasState__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).HasState(arg0, arg1)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_IsInTransition__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).IsInTransition(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_IsParameterControlledByCurve__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).IsParameterControlledByCurve(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_IsParameterControlledByCurve__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).IsParameterControlledByCurve(arg0)));
    }

    return true;
}

static bool IAnimatorControllerPlayable_Play__String__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).Play(arg0, arg1, arg2);
    }

    return true;
}

static bool IAnimatorControllerPlayable_Play__Int32__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).Play(arg0, arg1, arg2);
    }

    return true;
}

static bool IAnimatorControllerPlayable_PlayInFixedTime__String__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).PlayInFixedTime(arg0, arg1, arg2);
    }

    return true;
}

static bool IAnimatorControllerPlayable_PlayInFixedTime__Int32__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).PlayInFixedTime(arg0, arg1, arg2);
    }

    return true;
}

static bool IAnimatorControllerPlayable_ResetTrigger__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).ResetTrigger(arg0);
    }

    return true;
}

static bool IAnimatorControllerPlayable_ResetTrigger__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).ResetTrigger(arg0);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetBool__String__Boolean(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Boolean arg1 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetBool(arg0, arg1);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetBool__Int32__Boolean(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Boolean arg1 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetBool(arg0, arg1);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetFloat__String__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetFloat(arg0, arg1);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetFloat__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetFloat(arg0, arg1);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetInteger__String__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetInteger(arg0, arg1);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetInteger__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetInteger(arg0, arg1);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetLayerWeight__Int32__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetLayerWeight(arg0, arg1);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetTrigger__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetTrigger(arg0);
    }

    return true;
}

static bool IAnimatorControllerPlayable_SetTrigger__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        ((UnityEngine.Experimental.Director.IAnimatorControllerPlayable)vc.csObj).SetTrigger(arg0);
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.Experimental.Director.IAnimatorControllerPlayable);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        IAnimatorControllerPlayable_layerCount,
        IAnimatorControllerPlayable_parameterCount,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_CrossFade__Int32__Single__Int32__Single, "CrossFade"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_CrossFade__String__Single__Int32__Single, "CrossFade"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_CrossFadeInFixedTime__String__Single__Int32__Single, "CrossFadeInFixedTime"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_CrossFadeInFixedTime__Int32__Single__Int32__Single, "CrossFadeInFixedTime"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetAnimatorTransitionInfo__Int32, "GetAnimatorTransitionInfo"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetBool__Int32, "GetBool"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetBool__String, "GetBool"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetCurrentAnimatorClipInfo__Int32, "GetCurrentAnimatorClipInfo"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetCurrentAnimatorStateInfo__Int32, "GetCurrentAnimatorStateInfo"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetFloat__Int32, "GetFloat"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetFloat__String, "GetFloat"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetInteger__String, "GetInteger"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetInteger__Int32, "GetInteger"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetLayerIndex__String, "GetLayerIndex"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetLayerName__Int32, "GetLayerName"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetLayerWeight__Int32, "GetLayerWeight"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetNextAnimatorClipInfo__Int32, "GetNextAnimatorClipInfo"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetNextAnimatorStateInfo__Int32, "GetNextAnimatorStateInfo"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_GetParameter__Int32, "GetParameter"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_HasState__Int32__Int32, "HasState"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_IsInTransition__Int32, "IsInTransition"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_IsParameterControlledByCurve__String, "IsParameterControlledByCurve"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_IsParameterControlledByCurve__Int32, "IsParameterControlledByCurve"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_Play__String__Int32__Single, "Play"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_Play__Int32__Int32__Single, "Play"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_PlayInFixedTime__String__Int32__Single, "PlayInFixedTime"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_PlayInFixedTime__Int32__Int32__Single, "PlayInFixedTime"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_ResetTrigger__String, "ResetTrigger"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_ResetTrigger__Int32, "ResetTrigger"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetBool__String__Boolean, "SetBool"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetBool__Int32__Boolean, "SetBool"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetFloat__String__Single, "SetFloat"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetFloat__Int32__Single, "SetFloat"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetInteger__String__Int32, "SetInteger"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetInteger__Int32__Int32, "SetInteger"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetLayerWeight__Int32__Single, "SetLayerWeight"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetTrigger__String, "SetTrigger"),
        new JSMgr.MethodCallBackInfo(IAnimatorControllerPlayable_SetTrigger__Int32, "SetTrigger"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
