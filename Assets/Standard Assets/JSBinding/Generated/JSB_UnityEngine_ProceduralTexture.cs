
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_ProceduralTexture
{

////////////////////// ProceduralTexture ///////////////////////////////////////
// constructors

static bool ProceduralTexture_ProceduralTexture1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, new UnityEngine.ProceduralTexture());
    }

    return true;
}

// fields

// properties
static void ProceduralTexture_hasAlpha(JSVCall vc)
{
        UnityEngine.ProceduralTexture _this = (UnityEngine.ProceduralTexture)vc.csObj;
        var result = _this.hasAlpha;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
}
static void ProceduralTexture_format(JSVCall vc)
{
        UnityEngine.ProceduralTexture _this = (UnityEngine.ProceduralTexture)vc.csObj;
        var result = _this.format;
                JSApi.setEnum((int)JSApi.SetType.Rval, (int)result);
}

// methods

static bool ProceduralTexture_GetPixels32__Int32__Int32__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg3 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                var arrRet = ((UnityEngine.ProceduralTexture)vc.csObj).GetPixels32(arg0, arg1, arg2, arg3);
        for (int i = 0; arrRet != null && i < arrRet.Length; i++)
        {
            JSMgr.datax.setObject((int)JSApi.SetType.SaveAndTempTrace, arrRet[i]);
            JSApi.moveSaveID2Arr(i);
        }
        JSApi.setArrayS((int)JSApi.SetType.Rval, (arrRet != null ? arrRet.Length : 0), true);
    }

    return true;
}

static bool ProceduralTexture_GetProceduralOutputType(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSApi.setEnum((int)JSApi.SetType.Rval, (int)((UnityEngine.ProceduralTexture)vc.csObj).GetProceduralOutputType());
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.ProceduralTexture);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        ProceduralTexture_hasAlpha,
        ProceduralTexture_format,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(ProceduralTexture_ProceduralTexture1, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(ProceduralTexture_GetPixels32__Int32__Int32__Int32__Int32, "GetPixels32"),
        new JSMgr.MethodCallBackInfo(ProceduralTexture_GetProceduralOutputType, "GetProceduralOutputType"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
