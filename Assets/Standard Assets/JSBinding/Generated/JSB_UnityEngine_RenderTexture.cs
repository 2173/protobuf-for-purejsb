
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_RenderTexture
{

////////////////////// RenderTexture ///////////////////////////////////////
// constructors

static bool RenderTexture_RenderTexture1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 5)
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTextureFormat arg3 = (UnityEngine.RenderTextureFormat)JSApi.getEnum((int)JSApi.GetType.Arg);
        UnityEngine.RenderTextureReadWrite arg4 = (UnityEngine.RenderTextureReadWrite)JSApi.getEnum((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, new UnityEngine.RenderTexture(arg0, arg1, arg2, arg3, arg4));
    }

    return true;
}

static bool RenderTexture_RenderTexture2(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 4)
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTextureFormat arg3 = (UnityEngine.RenderTextureFormat)JSApi.getEnum((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, new UnityEngine.RenderTexture(arg0, arg1, arg2, arg3));
    }

    return true;
}

static bool RenderTexture_RenderTexture3(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 3)
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        JSMgr.addJSCSRel(_this, new UnityEngine.RenderTexture(arg0, arg1, arg2));
    }

    return true;
}

// fields

// properties
static void RenderTexture_width(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.width;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
    }
    else
    { 
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.width = arg0;
    }
}
static void RenderTexture_height(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.height;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
    }
    else
    { 
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.height = arg0;
    }
}
static void RenderTexture_depth(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.depth;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
    }
    else
    { 
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.depth = arg0;
    }
}
static void RenderTexture_isPowerOfTwo(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.isPowerOfTwo;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.isPowerOfTwo = arg0;
    }
}
static void RenderTexture_sRGB(JSVCall vc)
{
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.sRGB;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
}
static void RenderTexture_format(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.format;
                JSApi.setEnum((int)JSApi.SetType.Rval, (int)result);
    }
    else
    { 
        UnityEngine.RenderTextureFormat arg0 = (UnityEngine.RenderTextureFormat)JSApi.getEnum((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.format = arg0;
    }
}
static void RenderTexture_useMipMap(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.useMipMap;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.useMipMap = arg0;
    }
}
static void RenderTexture_generateMips(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.generateMips;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.generateMips = arg0;
    }
}
static void RenderTexture_isCubemap(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.isCubemap;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.isCubemap = arg0;
    }
}
static void RenderTexture_isVolume(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.isVolume;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.isVolume = arg0;
    }
}
static void RenderTexture_volumeDepth(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.volumeDepth;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
    }
    else
    { 
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.volumeDepth = arg0;
    }
}
static void RenderTexture_antiAliasing(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.antiAliasing;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
    }
    else
    { 
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.antiAliasing = arg0;
    }
}
static void RenderTexture_enableRandomWrite(JSVCall vc)
{
    if (vc.bGet)
    { 
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.enableRandomWrite;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        _this.enableRandomWrite = arg0;
    }
}
static void RenderTexture_colorBuffer(JSVCall vc)
{
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.colorBuffer;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
static void RenderTexture_depthBuffer(JSVCall vc)
{
        UnityEngine.RenderTexture _this = (UnityEngine.RenderTexture)vc.csObj;
        var result = _this.depthBuffer;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
}
static void RenderTexture_active(JSVCall vc)
{
    if (vc.bGet)
    { 
        var result = UnityEngine.RenderTexture.active;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.RenderTexture arg0 = (UnityEngine.RenderTexture)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture.active = arg0;
    }
}

// methods

static bool RenderTexture_Create(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((UnityEngine.RenderTexture)vc.csObj).Create()));
    }

    return true;
}

static bool RenderTexture_DiscardContents__Boolean__Boolean(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        System.Boolean arg1 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        ((UnityEngine.RenderTexture)vc.csObj).DiscardContents(arg0, arg1);
    }

    return true;
}

static bool RenderTexture_DiscardContents(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        ((UnityEngine.RenderTexture)vc.csObj).DiscardContents();
    }

    return true;
}

static bool RenderTexture_GetTexelOffset(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSApi.setVector2S((int)JSApi.SetType.Rval, ((UnityEngine.RenderTexture)vc.csObj).GetTexelOffset());
    }

    return true;
}

static bool RenderTexture_IsCreated(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(((UnityEngine.RenderTexture)vc.csObj).IsCreated()));
    }

    return true;
}

static bool RenderTexture_MarkRestoreExpected(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        ((UnityEngine.RenderTexture)vc.csObj).MarkRestoreExpected();
    }

    return true;
}

static bool RenderTexture_Release(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        ((UnityEngine.RenderTexture)vc.csObj).Release();
    }

    return true;
}

static bool RenderTexture_SetGlobalShaderProperty__String(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.String arg0 = (System.String)JSApi.getStringS((int)JSApi.GetType.Arg);
        ((UnityEngine.RenderTexture)vc.csObj).SetGlobalShaderProperty(arg0);
    }

    return true;
}

static bool RenderTexture_GetTemporary__Int32__Int32__Int32__RenderTextureFormat__RenderTextureReadWrite__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 6) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTextureFormat arg3 = (UnityEngine.RenderTextureFormat)JSApi.getEnum((int)JSApi.GetType.Arg);
        UnityEngine.RenderTextureReadWrite arg4 = (UnityEngine.RenderTextureReadWrite)JSApi.getEnum((int)JSApi.GetType.Arg);
        System.Int32 arg5 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, UnityEngine.RenderTexture.GetTemporary(arg0, arg1, arg2, arg3, arg4, arg5));
    }

    return true;
}

static bool RenderTexture_GetTemporary__Int32__Int32__Int32__RenderTextureFormat__RenderTextureReadWrite(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 5) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTextureFormat arg3 = (UnityEngine.RenderTextureFormat)JSApi.getEnum((int)JSApi.GetType.Arg);
        UnityEngine.RenderTextureReadWrite arg4 = (UnityEngine.RenderTextureReadWrite)JSApi.getEnum((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, UnityEngine.RenderTexture.GetTemporary(arg0, arg1, arg2, arg3, arg4));
    }

    return true;
}

static bool RenderTexture_GetTemporary__Int32__Int32__Int32__RenderTextureFormat(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.RenderTextureFormat arg3 = (UnityEngine.RenderTextureFormat)JSApi.getEnum((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, UnityEngine.RenderTexture.GetTemporary(arg0, arg1, arg2, arg3));
    }

    return true;
}

static bool RenderTexture_GetTemporary__Int32__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg2 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, UnityEngine.RenderTexture.GetTemporary(arg0, arg1, arg2));
    }

    return true;
}

static bool RenderTexture_GetTemporary__Int32__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, UnityEngine.RenderTexture.GetTemporary(arg0, arg1));
    }

    return true;
}

static bool RenderTexture_ReleaseTemporary__RenderTexture(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        UnityEngine.RenderTexture arg0 = (UnityEngine.RenderTexture)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.RenderTexture.ReleaseTemporary(arg0);
    }

    return true;
}

static bool RenderTexture_SupportsStencil__RenderTexture(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        UnityEngine.RenderTexture arg0 = (UnityEngine.RenderTexture)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(UnityEngine.RenderTexture.SupportsStencil(arg0)));
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.RenderTexture);
    ci.fields = new JSMgr.CSCallbackField[]
    {

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        RenderTexture_width,
        RenderTexture_height,
        RenderTexture_depth,
        RenderTexture_isPowerOfTwo,
        RenderTexture_sRGB,
        RenderTexture_format,
        RenderTexture_useMipMap,
        RenderTexture_generateMips,
        RenderTexture_isCubemap,
        RenderTexture_isVolume,
        RenderTexture_volumeDepth,
        RenderTexture_antiAliasing,
        RenderTexture_enableRandomWrite,
        RenderTexture_colorBuffer,
        RenderTexture_depthBuffer,
        RenderTexture_active,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(RenderTexture_RenderTexture1, ".ctor"),
        new JSMgr.MethodCallBackInfo(RenderTexture_RenderTexture2, ".ctor"),
        new JSMgr.MethodCallBackInfo(RenderTexture_RenderTexture3, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(RenderTexture_Create, "Create"),
        new JSMgr.MethodCallBackInfo(RenderTexture_DiscardContents__Boolean__Boolean, "DiscardContents"),
        new JSMgr.MethodCallBackInfo(RenderTexture_DiscardContents, "DiscardContents"),
        new JSMgr.MethodCallBackInfo(RenderTexture_GetTexelOffset, "GetTexelOffset"),
        new JSMgr.MethodCallBackInfo(RenderTexture_IsCreated, "IsCreated"),
        new JSMgr.MethodCallBackInfo(RenderTexture_MarkRestoreExpected, "MarkRestoreExpected"),
        new JSMgr.MethodCallBackInfo(RenderTexture_Release, "Release"),
        new JSMgr.MethodCallBackInfo(RenderTexture_SetGlobalShaderProperty__String, "SetGlobalShaderProperty"),
        new JSMgr.MethodCallBackInfo(RenderTexture_GetTemporary__Int32__Int32__Int32__RenderTextureFormat__RenderTextureReadWrite__Int32, "GetTemporary"),
        new JSMgr.MethodCallBackInfo(RenderTexture_GetTemporary__Int32__Int32__Int32__RenderTextureFormat__RenderTextureReadWrite, "GetTemporary"),
        new JSMgr.MethodCallBackInfo(RenderTexture_GetTemporary__Int32__Int32__Int32__RenderTextureFormat, "GetTemporary"),
        new JSMgr.MethodCallBackInfo(RenderTexture_GetTemporary__Int32__Int32__Int32, "GetTemporary"),
        new JSMgr.MethodCallBackInfo(RenderTexture_GetTemporary__Int32__Int32, "GetTemporary"),
        new JSMgr.MethodCallBackInfo(RenderTexture_ReleaseTemporary__RenderTexture, "ReleaseTemporary"),
        new JSMgr.MethodCallBackInfo(RenderTexture_SupportsStencil__RenderTexture, "SupportsStencil"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
