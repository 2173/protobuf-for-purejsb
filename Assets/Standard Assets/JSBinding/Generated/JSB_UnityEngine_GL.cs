
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by CSGenerator.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using jsval = JSApi.jsval;

public class JSB_UnityEngine_GL
{

////////////////////// GL ///////////////////////////////////////
// constructors

static bool GL_GL1(JSVCall vc, int argc)
{
    int _this = JSApi.getObject((int)JSApi.GetType.Arg);
    JSApi.attachFinalizerObject(_this);
    --argc;

    int len = argc;
    if (len == 0)
    {
        JSMgr.addJSCSRel(_this, new UnityEngine.GL());
    }

    return true;
}

// fields
static void GL_TRIANGLES(JSVCall vc)
{
        var result = UnityEngine.GL.TRIANGLES;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}
static void GL_TRIANGLE_STRIP(JSVCall vc)
{
        var result = UnityEngine.GL.TRIANGLE_STRIP;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}
static void GL_QUADS(JSVCall vc)
{
        var result = UnityEngine.GL.QUADS;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}
static void GL_LINES(JSVCall vc)
{
        var result = UnityEngine.GL.LINES;
                JSApi.setInt32((int)JSApi.SetType.Rval, (System.Int32)(result));
}

// properties
static void GL_modelview(JSVCall vc)
{
    if (vc.bGet)
    { 
        var result = UnityEngine.GL.modelview;
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, result);
    }
    else
    { 
        UnityEngine.Matrix4x4 arg0 = (UnityEngine.Matrix4x4)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.GL.modelview = arg0;
    }
}
static void GL_wireframe(JSVCall vc)
{
    if (vc.bGet)
    { 
        var result = UnityEngine.GL.wireframe;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.GL.wireframe = arg0;
    }
}
static void GL_sRGBWrite(JSVCall vc)
{
    if (vc.bGet)
    { 
        var result = UnityEngine.GL.sRGBWrite;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.GL.sRGBWrite = arg0;
    }
}
static void GL_invertCulling(JSVCall vc)
{
    if (vc.bGet)
    { 
        var result = UnityEngine.GL.invertCulling;
                JSApi.setBooleanS((int)JSApi.SetType.Rval, (System.Boolean)(result));
    }
    else
    { 
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.GL.invertCulling = arg0;
    }
}

// methods

static bool GL_Begin__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.GL.Begin(arg0);
    }

    return true;
}

static bool GL_Clear__Boolean__Boolean__Color__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        System.Boolean arg1 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.Color arg2 = (UnityEngine.Color)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Single arg3 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.GL.Clear(arg0, arg1, arg2, arg3);
    }

    return true;
}

static bool GL_Clear__Boolean__Boolean__Color(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        System.Boolean arg1 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.Color arg2 = (UnityEngine.Color)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.GL.Clear(arg0, arg1, arg2);
    }

    return true;
}

static bool GL_ClearWithSkybox__Boolean__Camera(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Boolean arg0 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
        UnityEngine.Camera arg1 = (UnityEngine.Camera)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.GL.ClearWithSkybox(arg0, arg1);
    }

    return true;
}

static bool GL_Color__Color(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        UnityEngine.Color arg0 = (UnityEngine.Color)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.GL.Color(arg0);
    }

    return true;
}

static bool GL_End(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        UnityEngine.GL.End();
    }

    return true;
}

static bool GL_GetGPUProjectionMatrix__Matrix4x4__Boolean(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        UnityEngine.Matrix4x4 arg0 = (UnityEngine.Matrix4x4)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        System.Boolean arg1 = (System.Boolean)JSApi.getBooleanS((int)JSApi.GetType.Arg);
                JSMgr.datax.setObject((int)JSApi.SetType.Rval, UnityEngine.GL.GetGPUProjectionMatrix(arg0, arg1));
    }

    return true;
}

static bool GL_InvalidateState(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        UnityEngine.GL.InvalidateState();
    }

    return true;
}

static bool GL_IssuePluginEvent__IntPtr__Int32(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.IntPtr arg0 = (System.IntPtr)JSApi.getIntPtr((int)JSApi.GetType.Arg);
        System.Int32 arg1 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.GL.IssuePluginEvent(arg0, arg1);
    }

    return true;
}

static bool GL_LoadIdentity(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        UnityEngine.GL.LoadIdentity();
    }

    return true;
}

static bool GL_LoadOrtho(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        UnityEngine.GL.LoadOrtho();
    }

    return true;
}

static bool GL_LoadPixelMatrix__Single__Single__Single__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg3 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.GL.LoadPixelMatrix(arg0, arg1, arg2, arg3);
    }

    return true;
}

static bool GL_LoadPixelMatrix(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        UnityEngine.GL.LoadPixelMatrix();
    }

    return true;
}

static bool GL_LoadProjectionMatrix__Matrix4x4(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        UnityEngine.Matrix4x4 arg0 = (UnityEngine.Matrix4x4)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.GL.LoadProjectionMatrix(arg0);
    }

    return true;
}

static bool GL_MultiTexCoord__Int32__Vector3(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        UnityEngine.Vector3 arg1 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.GL.MultiTexCoord(arg0, arg1);
    }

    return true;
}

static bool GL_MultiTexCoord2__Int32__Single__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.GL.MultiTexCoord2(arg0, arg1, arg2);
    }

    return true;
}

static bool GL_MultiTexCoord3__Int32__Single__Single__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 4) 
    {
        System.Int32 arg0 = (System.Int32)JSApi.getInt32((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg3 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.GL.MultiTexCoord3(arg0, arg1, arg2, arg3);
    }

    return true;
}

static bool GL_MultMatrix__Matrix4x4(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        UnityEngine.Matrix4x4 arg0 = (UnityEngine.Matrix4x4)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.GL.MultMatrix(arg0);
    }

    return true;
}

static bool GL_PopMatrix(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        UnityEngine.GL.PopMatrix();
    }

    return true;
}

static bool GL_PushMatrix(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        UnityEngine.GL.PushMatrix();
    }

    return true;
}

static bool GL_RenderTargetBarrier(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 0) 
    {
        UnityEngine.GL.RenderTargetBarrier();
    }

    return true;
}

static bool GL_TexCoord__Vector3(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.GL.TexCoord(arg0);
    }

    return true;
}

static bool GL_TexCoord2__Single__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 2) 
    {
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.GL.TexCoord2(arg0, arg1);
    }

    return true;
}

static bool GL_TexCoord3__Single__Single__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.GL.TexCoord3(arg0, arg1, arg2);
    }

    return true;
}

static bool GL_Vertex__Vector3(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)JSApi.getVector3S((int)JSApi.GetType.Arg);
        UnityEngine.GL.Vertex(arg0);
    }

    return true;
}

static bool GL_Vertex3__Single__Single__Single(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 3) 
    {
        System.Single arg0 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg1 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        System.Single arg2 = (System.Single)JSApi.getSingle((int)JSApi.GetType.Arg);
        UnityEngine.GL.Vertex3(arg0, arg1, arg2);
    }

    return true;
}

static bool GL_Viewport__Rect(JSVCall vc, int argc)
{
    int len = argc;
    if (len == 1) 
    {
        UnityEngine.Rect arg0 = (UnityEngine.Rect)JSMgr.datax.getObject((int)JSApi.GetType.Arg);
        UnityEngine.GL.Viewport(arg0);
    }

    return true;
}


//register

public static void __Register()
{
    JSMgr.CallbackInfo ci = new JSMgr.CallbackInfo();
    ci.type = typeof(UnityEngine.GL);
    ci.fields = new JSMgr.CSCallbackField[]
    {
        GL_TRIANGLES,
        GL_TRIANGLE_STRIP,
        GL_QUADS,
        GL_LINES,

    };
    ci.properties = new JSMgr.CSCallbackProperty[]
    {
        GL_modelview,
        GL_wireframe,
        GL_sRGBWrite,
        GL_invertCulling,

    };
    ci.constructors = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(GL_GL1, ".ctor"),

    };
    ci.methods = new JSMgr.MethodCallBackInfo[]
    {
        new JSMgr.MethodCallBackInfo(GL_Begin__Int32, "Begin"),
        new JSMgr.MethodCallBackInfo(GL_Clear__Boolean__Boolean__Color__Single, "Clear"),
        new JSMgr.MethodCallBackInfo(GL_Clear__Boolean__Boolean__Color, "Clear"),
        new JSMgr.MethodCallBackInfo(GL_ClearWithSkybox__Boolean__Camera, "ClearWithSkybox"),
        new JSMgr.MethodCallBackInfo(GL_Color__Color, "Color"),
        new JSMgr.MethodCallBackInfo(GL_End, "End"),
        new JSMgr.MethodCallBackInfo(GL_GetGPUProjectionMatrix__Matrix4x4__Boolean, "GetGPUProjectionMatrix"),
        new JSMgr.MethodCallBackInfo(GL_InvalidateState, "InvalidateState"),
        new JSMgr.MethodCallBackInfo(GL_IssuePluginEvent__IntPtr__Int32, "IssuePluginEvent"),
        new JSMgr.MethodCallBackInfo(GL_LoadIdentity, "LoadIdentity"),
        new JSMgr.MethodCallBackInfo(GL_LoadOrtho, "LoadOrtho"),
        new JSMgr.MethodCallBackInfo(GL_LoadPixelMatrix__Single__Single__Single__Single, "LoadPixelMatrix"),
        new JSMgr.MethodCallBackInfo(GL_LoadPixelMatrix, "LoadPixelMatrix"),
        new JSMgr.MethodCallBackInfo(GL_LoadProjectionMatrix__Matrix4x4, "LoadProjectionMatrix"),
        new JSMgr.MethodCallBackInfo(GL_MultiTexCoord__Int32__Vector3, "MultiTexCoord"),
        new JSMgr.MethodCallBackInfo(GL_MultiTexCoord2__Int32__Single__Single, "MultiTexCoord2"),
        new JSMgr.MethodCallBackInfo(GL_MultiTexCoord3__Int32__Single__Single__Single, "MultiTexCoord3"),
        new JSMgr.MethodCallBackInfo(GL_MultMatrix__Matrix4x4, "MultMatrix"),
        new JSMgr.MethodCallBackInfo(GL_PopMatrix, "PopMatrix"),
        new JSMgr.MethodCallBackInfo(GL_PushMatrix, "PushMatrix"),
        new JSMgr.MethodCallBackInfo(GL_RenderTargetBarrier, "RenderTargetBarrier"),
        new JSMgr.MethodCallBackInfo(GL_TexCoord__Vector3, "TexCoord"),
        new JSMgr.MethodCallBackInfo(GL_TexCoord2__Single__Single, "TexCoord2"),
        new JSMgr.MethodCallBackInfo(GL_TexCoord3__Single__Single__Single, "TexCoord3"),
        new JSMgr.MethodCallBackInfo(GL_Vertex__Vector3, "Vertex"),
        new JSMgr.MethodCallBackInfo(GL_Vertex3__Single__Single__Single, "Vertex3"),
        new JSMgr.MethodCallBackInfo(GL_Viewport__Rect, "Viewport"),

    };
    JSMgr.allCallbackInfo.Add(ci);
}


}
